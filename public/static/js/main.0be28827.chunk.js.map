{"version":3,"sources":["components/navbar/index.js","components/Layout.js","components/home/jumbotron/index.js","components/home/index.js","components/services/index.js","components/contact/index.js","components/404.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["navbar","Navbar","bg","variant","Brand","as","Link","to","Toggle","aria-controls","Nav","className","NavDropdown","title","id","Item","href","Divider","props","Container","children","Jumbotron","fluid","NotFound","exact","path","component","Home","Services","Contact","App","Layout","Routes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQA4BeA,EAtBA,WACX,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,SACvB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,GAAIC,IAAMC,GAAG,KAA3B,mBACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIJ,KAAL,CAAUD,GAAIC,IAAMC,GAAG,KAAvB,QACA,kBAACG,EAAA,EAAIJ,KAAL,CAAUD,GAAIC,IAAMC,GAAG,aAAvB,YACA,kBAACK,EAAA,EAAD,CAAaC,MAAM,mBAAmBC,GAAG,2BACrC,kBAACF,EAAA,EAAYG,KAAb,CAAkBC,KAAK,eAAvB,UACA,kBAACJ,EAAA,EAAYG,KAAb,CAAkBC,KAAK,eAAvB,kBACA,kBAACJ,EAAA,EAAYG,KAAb,CAAkBC,KAAK,eAAvB,aACA,kBAACJ,EAAA,EAAYK,QAAb,MACA,kBAACL,EAAA,EAAYG,KAAb,CAAkBC,KAAK,eAAvB,mBAEJ,kBAACN,EAAA,EAAIJ,KAAL,CAAUD,GAAIC,IAAMC,GAAG,YAAvB,iB,QClBD,WAACW,GAAD,OACX,kBAACC,EAAA,EAAD,KACMD,EAAME,W,gBCDD,G,MAAA,WACX,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACX,UAAU,wBACvB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,+DACX,yBAAKA,UAAU,oBAAf,mBACA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,wBAAf,WACY,sCADZ,QAC+B,qCAD/B,qBCRT,aACX,OACI,6BACI,kBAAC,EAAD,QCJG,aACX,OACI,6BACI,6CACA,sDCJG,aACX,OACI,6BACI,4CACA,sDCHG,SAASY,IACpB,OACI,kBAACJ,EAAA,EAAD,KACI,wBAAIR,UAAU,eAAd,mBCCG,wBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWE,IACnC,kBAAC,IAAD,CAAOH,KAAK,WAAWC,UAAWG,IAClC,kBAAC,IAAD,CAAOH,UAAWH,MCOXO,MAbf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKnB,UAAU,OACb,kBAACoB,EAAD,KACE,kBAAC,EAAD,MACA,kBAACC,EAAD,UCAUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0be28827.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { Link } from 'react-router-dom';\n\nconst navbar = () => {\n    return (\n        <Navbar bg=\"white\" variant=\"light\">\n            <Navbar.Brand as={Link} to=\"/\">Company Website</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Nav className=\"ml-auto\">\n                <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n                <Nav.Link as={Link} to=\"/services\">Services</Nav.Link>\n                <NavDropdown title=\"Additional Menus\" id=\"collasible-nav-dropdown\">\n                    <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                    <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                    <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                    <NavDropdown.Divider />\n                    <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                </NavDropdown>\n                <Nav.Link as={Link} to=\"/contact\">Contact Us</Nav.Link>\n            </Nav>\n            \n        </Navbar>\n    )\n}\n\nexport default navbar;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nexport default (props) => (\n    <Container>\n        { props.children }\n    </Container>\n);","import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport './index.css';\n\nexport default () =>{\n    return (\n        <Jumbotron fluid className=\"jumbo border rounded\">\n            <div className=\"row\">\n                <div className=\"jumbotron-text float-right text-center col-md-5 offset-md-6\">\n                    <div className=\"jumbotron-header\">Company Website</div>\n                    <div className=\"row\">\n                        <div className=\"col-md-8 offset-md-2\">\n                            Company <b>mission</b> and <b>vision</b> goes here.\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n        </Jumbotron>\n    )\n}","import React from 'react';\nimport Jumbotron from './jumbotron';\n\nexport default () => {\n    return (\n        <div>\n            <Jumbotron />\n        </div>\n    )\n}","import React from 'react';\n\nexport default () => {\n    return (\n        <div>\n            <h2>Services Page</h2>\n            <p>Lorem ipsum goes here</p>\n        </div>\n    )\n}\n","import React from 'react';\n\nexport default () => {\n    return (\n        <div>\n            <h2>Contact Page</h2>\n            <p>Lorem ipsum goes here</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nexport default function NotFound(){\n    return(\n        <Container>\n            <h1 className=\"text-center\">Page Not Found</h1>\n        </Container>\n    )\n}\n","import React from 'react';\nimport { Route, Switch }  from 'react-router-dom';\nimport Home from './components/home/';\nimport Services from './components/services/';\nimport Contact from './components/contact/';\nimport NotFound from './components/404';\n\nexport default () => (\n    <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/services\" component={Services} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route component={NotFound} />\n    </Switch>\n);\n","import React from 'react';\nimport { BrowserRouter }  from 'react-router-dom';\nimport Navbar from './components/navbar/';\nimport Layout from './components/Layout';\nimport Routes from './Routes';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Layout>\n          <Navbar />\n          <Routes />\n        </Layout>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}